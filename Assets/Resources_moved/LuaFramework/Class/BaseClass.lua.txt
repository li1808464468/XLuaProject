---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by haitao.li.
--- DateTime: 9/7/21 8:43 AM
---

--[[
-- Lua面向对象设计

    ClassA = BaseClass("ClassA")
    
    function ClassA:say() 
        print("Hello ClassA")
    end
    
    local testA = ClassA:New()
    testA:say()
--]]

--保存类类型的虚表
local _class = {}

-- 自定义类型
ClassType = {
    class = 1,
    instance = 2,
    
}

function BaseClass(classname, super)
    assert(type(classname) == "string" and #classname > 0)
    -- 生成一个类类型
    local class_type = {}

    -- 在创建对象的时候自动调用
    class_type.__init = false
    class_type.__delete = false
    class_type.__cname = classname
    class_type.__ctype = ClassType.class

    class_type.super = super
    function New(...)
        -- 生成一个类对象
        local obj = {}
        obj._class_type = class_type
        obj.__ctype = ClassType.instance

        -- 在初始化之前注册基类方法
        setmetatable(obj, {
            __index = _class[class_type],
        })
        -- 调用初始化方法
        do
            local create
            create = function(c, ...)
                if c.super then
                    create(c.super, ...)
                end
                if c.__init then
                    c.__init(obj, ...)
                end
            end

            create(class_type, ...)
        end

        -- 注册一个delete方法
        obj.Delete = function(self)
            local now_super = self._class_type
            while now_super ~= nil do
                if now_super.__delete then
                    now_super.__delete(self)
                end
                now_super = now_super.super
            end
        end

        return obj
    end
    

    local vtbl = {}
    _class[class_type] = vtbl

    setmetatable(class_type, {
        __newindex = function(t,k,v)
            vtbl[k] = v
        end
    ,
        --For call parent method
        __index = vtbl,
    })

    if super then
        setmetatable(vtbl, {
            __index = function(t,k)
                local ret = _class[super][k]
                --do not do accept, make hot update work right!
                --vtbl[k] = ret
                return ret
            end
        })
    end

    return class_type
end



-----克隆对象(建议用于克隆Class对象)
-----@param  any 对象
-----@return  any 克隆对象
--function Clone(object)
--    local lookup_table = {}
--    local function _copy(object)
--        if type(object) ~= "table" then
--            return object
--        elseif lookup_table[object] then
--            return lookup_table[object]
--        end
--        local new_table = {}
--        lookup_table[object] = new_table
--        for key, value in pairs(object) do
--            new_table[_copy(key)] = _copy(value)
--        end
--        return setmetatable(new_table, getmetatable(object))
--    end
--    return _copy(object)
--end
--
-----判定是否是指定类或者继承至该类
-----@param self Class@类实例对象或者类
-----@param cname string | Class@类名或者类定义table
--local function IsClass(self, cname)
--    if type(self) ~= "table" then
--        return false;
--    end
--
--    if type(cname) == "table" then
--        if self.class == cname then
--            return true;
--        elseif self.super then
--            return self.super.IsClass(self.super, cname);
--        end
--    elseif type(cname) == "string" then
--        if self.class.className == cname then
--            return true;
--        elseif self.super then
--            return self.super.IsClass(self.super, cname);
--        end
--    end
--    return false;
--end
